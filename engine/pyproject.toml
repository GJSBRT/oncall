[tool.isort]
profile = "black"
line_length=120
float_to_top=true
py_version=311
extend_skip_glob = "**/migrations/**"

[tool.black]
line-length = 120
target-version = ["py311"]
force-exclude = "migrations"

[tool.mypy]
# https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml

python_version = "3.12"

# Specifies the paths to use, after trying the paths from MYPYPATH environment variable. Useful if youâ€™d like to keep stubs in your repo, along with the config file. Multiple paths are always separated with a : or , regardless of the platform. User home directory and environment variables will be expanded.
mypy_path = "$MYPY_CONFIG_FILE_DIR/type_stubs"

# By default, imported values to a module are treated as exported and mypy allows other modules to import them. When false, mypy will not re-export unless the item is imported using from-as or is included in __all__
implicit_reexport = true

# A comma-separated list of mypy plugins
plugins = [
    "mypy_django_plugin.main",
    "mypy_drf_plugin.main",
]

# Use visually nicer output in error messages: use soft word wrap, show source code snippets, and show error location markers.
pretty = true

# A regular expression that matches file names, directory names and paths which mypy should ignore while recursively discovering files to check. Use forward slashes (/) as directory separators on all platforms.
#
# ignore test and migration files
exclude = [
    "^.*/migrations/.*\\.py$",
    "^.*/tests/.*\\.py$",
]
# exclude = "^.*/(migrations|tests)/.*\\.py$"

# Allows disabling one or multiple error codes globally.
disable_error_code = [
    "abstract",
    "annotation-unchecked",
    "arg-type",
    "assignment",
    "attr-defined",
    "call-arg",
    "call-overload",
    "has-type",
    "index",
    "misc",
    "name-defined",
    "operator",
    "return-value",
    "typeddict-item",
    "union-attr",
]

# TODO: add this when we update to mypy>=1.11.0
# enable_incomplete_feature = "NewGenericSyntax"

# mypy per-module options
[[tool.mypy.overrides]]
module = [
    # the following setting should eventually be removed, one module at a time.
    # It's only being added to temporarily surpress the:
    # "module is installed, but missing library stubs or py.typed marker" errors
    # we can slowly either start to add library stubs ourselves, or try and upgrade these libraries to see if
    # a newer version includes type stubs
    "anymail.*",
    "celery.utils.debug",
    "debug_toolbar.*",
    "django_deprecate_fields.*",
    "django_migration_linter",
    "django_sns_view.*",
    "factory.*",
    "fcm_django.*",
    "firebase_admin.*",
    "google.auth.exceptions.*",
    "googleapiclient.discovery.*",
    "googleapiclient.errors.*",
    "google.oauth2.credentials.*",
    "httpretty.*",
    "humanize.*",
    "ipware.*",
    "markdown2.*",
    "mirage.*",
    "ordered_model.*",
    "phonenumbers.*",
    "polymorphic.*",
    "pyroscope.*",
    "ratelimit.*",
    "regex.*",
    "recurring_ical_events.*",
    "rest_polymorphic.*",
    "slackclient.*",
    "slackviewer.*",
    "social_core.*",
    "social_django.*",
    "twilio.*",
    "uwsgidecorators.*",
    "whitenoise.*",
    "uwsgi.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    # the following are modules that we want to enable strict checks for, we should add more modules here little by
    # little
    "apps.google.*",
    "apps.webhooks.*",
]
enable_error_code = [
    "abstract",
    "annotation-unchecked",
    "arg-type",
    "assignment",
    "attr-defined",
    "call-arg",
    "call-overload",
    "has-type",
    "index",
    "misc",
    "name-defined",
    "operator",
    "return-value",
    "typeddict-item",
    "union-attr",
]
disallow_untyped_defs = true
disallow_untyped_calls = true
# TODO: eventually we should be able to turn on strict mode
# strict = true

[tool.django-stubs]
django_settings_module = "settings.dev"
